/**
 * Utility functions for cleaning and manipulating metadata objects
 * used in AI tracing and observability.
 */
import type { RuntimeContext } from '../di/index.js';
import type { AISpan, AISpanType, AISpanTypeMap, TracingContext } from './types.js';
/**
 * Cleans an object by testing each key-value pair for circular references.
 * Problematic values are replaced with error messages for debugging.
 * @param obj - Object to clean
 * @returns Cleaned object with circular references marked
 */
export declare function shallowCleanObject(obj: Record<string, any>): Record<string, any>;
/**
 * Cleans an array by applying object cleaning to each item.
 * @param arr - Array to clean
 * @returns Cleaned array with problematic items marked
 */
export declare function shallowCleanArray(arr: any[]): any[];
/**
 * Safely cleans any value by removing circular references and marking problematic data.
 * Provides detailed error information to help identify issues in source code.
 * @param value - Value to clean (object, array, primitive, etc.)
 * @returns Cleaned value with circular references marked
 */
export declare function shallowClean(value: any): any;
/**
 * Removes specific keys from an object.
 * @param obj - The original object
 * @param keysToOmit - Keys to exclude from the returned object
 * @returns A new object with the specified keys removed
 */
export declare function omitKeys<T extends Record<string, any>>(obj: T, keysToOmit: string[]): Partial<T>;
/**
 * Selectively extracts specific fields from an object using dot notation.
 * Does not error if fields don't exist - simply omits them from the result.
 * @param obj - The source object to extract fields from
 * @param fields - Array of field paths (supports dot notation like 'output.text')
 * @returns New object containing only the specified fields
 */
export declare function selectFields(obj: any, fields: string[]): any;
/**
 * Creates or gets a child span from existing tracing context or starts a new trace.
 * This helper consolidates the common pattern of creating spans that can either be:
 * 1. Children of an existing span (when tracingContext.currentSpan exists)
 * 2. New root spans (when no current span exists)
 *
 * @param options - Configuration object for span creation
 * @returns The created AI span or undefined if tracing is disabled
 */
export declare function getOrCreateSpan<T extends AISpanType>(options: {
    type: T;
    name: string;
    input?: any;
    attributes?: AISpanTypeMap[T];
    metadata?: Record<string, any>;
    tracingContext?: TracingContext;
    runtimeContext?: RuntimeContext;
}): AISpan<T> | undefined;
//# sourceMappingURL=utils.d.ts.map