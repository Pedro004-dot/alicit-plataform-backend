import type { ToolSet } from 'ai-v5';
import z from 'zod';
import type { OutputSchema } from '../../stream/base/schema.js';
import type { OuterLLMRun } from '../types.js';
export declare function createOuterLLMWorkflow<Tools extends ToolSet = ToolSet, OUTPUT extends OutputSchema | undefined = undefined>({ model, telemetry_settings, _internal, modelStreamSpan, ...rest }: OuterLLMRun<Tools, OUTPUT>): import("../../workflows").Workflow<import("../..").DefaultEngineType, import("../..").Step<string, any, any, any, any, import("../..").DefaultEngineType>[], "executionWorkflow", z.ZodObject<{
    messageId: z.ZodString;
    messages: z.ZodObject<{
        all: z.ZodArray<z.ZodAny, "many">;
        user: z.ZodArray<z.ZodAny, "many">;
        nonUser: z.ZodArray<z.ZodAny, "many">;
    }, "strip", z.ZodTypeAny, {
        user: any[];
        all: any[];
        nonUser: any[];
    }, {
        user: any[];
        all: any[];
        nonUser: any[];
    }>;
    output: z.ZodAny;
    metadata: z.ZodAny;
    stepResult: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    messageId: string;
    output?: any;
    stepResult?: any;
    metadata?: any;
}, {
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    messageId: string;
    output?: any;
    stepResult?: any;
    metadata?: any;
}>, z.ZodAny, z.ZodAny>;
//# sourceMappingURL=outer-llm-step.d.ts.map