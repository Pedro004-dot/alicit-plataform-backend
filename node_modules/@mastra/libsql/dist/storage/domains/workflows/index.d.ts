import type { Client } from '@libsql/client';
import type { WorkflowRun, WorkflowRuns, WorkflowRunState } from '@mastra/core';
import { WorkflowsStorage } from '@mastra/core/storage';
import type { StoreOperationsLibSQL } from '../operations/index.js';
export declare class WorkflowsLibSQL extends WorkflowsStorage {
    operations: StoreOperationsLibSQL;
    client: Client;
    constructor({ operations, client }: {
        operations: StoreOperationsLibSQL;
        client: Client;
    });
    persistWorkflowSnapshot({ workflowName, runId, snapshot, }: {
        workflowName: string;
        runId: string;
        snapshot: WorkflowRunState;
    }): Promise<void>;
    loadWorkflowSnapshot({ workflowName, runId, }: {
        workflowName: string;
        runId: string;
    }): Promise<WorkflowRunState | null>;
    getWorkflowRunById({ runId, workflowName, }: {
        runId: string;
        workflowName?: string;
    }): Promise<WorkflowRun | null>;
    getWorkflowRuns({ workflowName, fromDate, toDate, limit, offset, resourceId, }?: {
        workflowName?: string;
        fromDate?: Date;
        toDate?: Date;
        limit?: number;
        offset?: number;
        resourceId?: string;
    }): Promise<WorkflowRuns>;
}
//# sourceMappingURL=index.d.ts.map