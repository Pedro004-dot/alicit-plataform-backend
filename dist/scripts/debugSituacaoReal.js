"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugSituacaoReal = debugSituacaoReal;
const filters_1 = require("../services/licitacao/filters");
/**
 * Script para reproduzir exatamente a situa√ß√£o do log:
 * "Filtros aplicados: geografico (9651 ‚Üí 9651), regiao (9651 ‚Üí 0)"
 */
async function debugSituacaoReal() {
    console.log('üîç DEBUG: Reproduzindo situa√ß√£o do log original...\n');
    try {
        // Simular uma situa√ß√£o com muitas licita√ß√µes que passam no filtro geogr√°fico
        const licitacoesMock = [];
        // Criar licita√ß√µes principalmente de SP (para simular o cen√°rio real)
        const municipiosSP = ['S√£o Paulo', 'Guarulhos', 'Campinas', 'Osasco', 'Santo Andr√©'];
        const outrosEstados = [
            { uf: 'RJ', municipio: 'Rio de Janeiro' },
            { uf: 'MG', municipio: 'Belo Horizonte' },
            { uf: 'PR', municipio: 'Curitiba' },
            { uf: 'RS', municipio: 'Porto Alegre' },
            { uf: 'SC', municipio: 'Florian√≥polis' }
        ];
        // Adicionar muitas licita√ß√µes de SP
        for (let i = 0; i < 50; i++) {
            licitacoesMock.push({
                numeroControlePNCP: `SP${String(i).padStart(3, '0')}`,
                informacaoComplementar: `Mock SP ${i}`,
                modalidadeNome: 'Preg√£o Eletr√¥nico',
                valorTotalEstimado: 50000 + i * 1000,
                objetoCompra: 'Equipamentos diversos',
                unidadeOrgao: {
                    ufSigla: 'SP',
                    municipioNome: municipiosSP[i % municipiosSP.length]
                },
                itens: [{ numeroItem: 1, descricao: 'Item', materialOuServico: 'M', materialOuServicoNome: 'Material', valorUnitarioEstimado: 1000, valorTotal: 50000, quantidade: 50, ncmNbsCodigo: null, ncmNbsDescricao: null }]
            });
        }
        // Adicionar algumas de outros estados
        for (let i = 0; i < 20; i++) {
            const estado = outrosEstados[i % outrosEstados.length];
            licitacoesMock.push({
                numeroControlePNCP: `${estado.uf}${String(i).padStart(3, '0')}`,
                informacaoComplementar: `Mock ${estado.uf} ${i}`,
                modalidadeNome: 'Preg√£o Eletr√¥nico',
                valorTotalEstimado: 30000 + i * 1000,
                objetoCompra: 'Material variado',
                unidadeOrgao: {
                    ufSigla: estado.uf,
                    municipioNome: estado.municipio
                },
                itens: [{ numeroItem: 1, descricao: 'Item', materialOuServico: 'M', materialOuServicoNome: 'Material', valorUnitarioEstimado: 1000, valorTotal: 30000, quantidade: 30, ncmNbsCodigo: null, ncmNbsDescricao: null }]
            });
        }
        console.log(`üìã Criadas ${licitacoesMock.length} licita√ß√µes mock:`);
        // Contar por UF
        const contadorUF = licitacoesMock.reduce((acc, lic) => {
            const uf = lic.unidadeOrgao.ufSigla;
            acc[uf] = (acc[uf] || 0) + 1;
            return acc;
        }, {});
        console.log('   üìä Distribui√ß√£o por UF:');
        Object.entries(contadorUF).forEach(([uf, count]) => {
            console.log(`      ${uf}: ${count} licita√ß√µes`);
        });
        // Cen√°rios de teste que reproduzem o problema
        const cenarios = [
            {
                nome: 'Cen√°rio 1: Empresa SP buscando s√≥ em SP',
                perfil: {
                    cnpj: '12345678000199',
                    termosInteresse: ['tecnologia'],
                    cidadeRadar: 'S√£o Paulo',
                    raioRadar: 1000, // Raio muito grande para pegar tudo geograficamente
                    regiaoAtuacao: ['SP']
                }
            },
            {
                nome: 'Cen√°rio 2: Empresa configurada para regi√£o que n√£o existe',
                perfil: {
                    cnpj: '12345678000199',
                    termosInteresse: ['tecnologia'],
                    cidadeRadar: 'S√£o Paulo',
                    raioRadar: 1000,
                    regiaoAtuacao: ['BA', 'CE'] // Estados que n√£o temos nas licita√ß√µes
                }
            },
            {
                nome: 'Cen√°rio 3: Regi√£o com sigla errada',
                perfil: {
                    cnpj: '12345678000199',
                    termosInteresse: ['tecnologia'],
                    cidadeRadar: 'S√£o Paulo',
                    raioRadar: 1000,
                    regiaoAtuacao: ['SP', 'sp', 'Sp'] // Case sensitivity problema?
                }
            },
            {
                nome: 'Cen√°rio 4: Regi√£o undefined mas array existe',
                perfil: {
                    cnpj: '12345678000199',
                    termosInteresse: ['tecnologia'],
                    cidadeRadar: 'S√£o Paulo',
                    raioRadar: 1000,
                    regiaoAtuacao: [undefined, null]
                }
            }
        ];
        console.log('\nüéØ Testando cen√°rios que podem reproduzir o problema:');
        for (const cenario of cenarios) {
            console.log(`\n   üìç ${cenario.nome}:`);
            console.log(`      regiaoAtuacao: ${JSON.stringify(cenario.perfil.regiaoAtuacao)}`);
            const resultado = await (0, filters_1.aplicarFiltrosAtivos)(licitacoesMock, cenario.perfil);
            console.log(`      üìä ${resultado.estatisticas.totalInicial} ‚Üí ${resultado.estatisticas.totalFinal} licita√ß√µes`);
            console.log(`      üìà Filtros: ${resultado.filtrosAplicados.join(', ')}`);
            console.log(`      üìâ Redu√ß√£o: ${resultado.estatisticas.reducaoPercentual}%`);
            if (resultado.estatisticas.totalFinal === 0) {
                console.log(`      ‚ùå REPRODUZIMOS O PROBLEMA! Todas foram filtradas`);
            }
            else {
                console.log(`      ‚úÖ ${resultado.estatisticas.totalFinal} licita√ß√µes passaram`);
            }
        }
    }
    catch (error) {
        console.error('‚ùå Erro durante debug:', error);
    }
}
// Executa se for chamado diretamente
if (require.main === module) {
    debugSituacaoReal()
        .then(() => {
        console.log('\nüèÅ Debug finalizado!');
        process.exit(0);
    })
        .catch((error) => {
        console.error('\nüí• Erro fatal:', error);
        process.exit(1);
    });
}
