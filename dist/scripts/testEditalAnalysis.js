"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const analysisService_1 = require("../services/edital/analysisService");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const dotenv_1 = require("dotenv");
// Carregar vari√°veis de ambiente
(0, dotenv_1.config)();
async function loadMaritporaDocuments() {
    const documentsPath = path.join(__dirname, '../../documents/edital_maripora');
    const documents = [];
    try {
        console.log(`üìÅ Buscando documentos em: ${documentsPath}`);
        // Verificar se a pasta existe
        if (!fs.existsSync(documentsPath)) {
            console.error("‚ùå Pasta edital_maripora n√£o encontrada!");
            return [];
        }
        // Ler todos os arquivos da pasta edital_maripora
        const files = fs.readdirSync(documentsPath);
        console.log(`üìã Arquivos encontrados na pasta edital_maripora: ${files.length}`);
        files.forEach(file => console.log(`  - ${file}`));
        for (const file of files) {
            const filePath = path.join(documentsPath, file);
            const stat = fs.statSync(filePath);
            if (stat.isFile() && file.endsWith('.pdf')) {
                console.log(`üìÑ Carregando PDF: ${file}`);
                console.log(`üìä Tamanho do arquivo: ${(stat.size / 1024).toFixed(2)} KB`);
                const buffer = fs.readFileSync(filePath);
                documents.push({
                    buffer,
                    filename: file,
                    path: filePath,
                });
                console.log(`‚úÖ PDF carregado: ${file} (${buffer.length} bytes)`);
            }
        }
        console.log(`‚úÖ Total de ${documents.length} documentos PDF carregados da pasta edital_maripora`);
        return documents;
    }
    catch (error) {
        console.error("‚ùå Erro ao carregar documentos da pasta edital_maripora:", error);
        return [];
    }
}
async function testEditalAnalysis() {
    console.log("üöÄ INICIANDO TESTE AVAN√áADO COM 8 AGENTES ESPECIALIZADOS");
    console.log("‚ïê".repeat(80));
    // Verificar se API key est√° carregada
    if (!process.env.OPENAI_API_KEY) {
        console.error("‚ùå OPENAI_API_KEY n√£o encontrada! Verifique o arquivo .env");
        return;
    }
    console.log("‚úÖ OPENAI_API_KEY carregada:", process.env.OPENAI_API_KEY.substring(0, 20) + "...");
    console.log(`ü§ñ Modo de an√°lise: AVAN√áADO (8 agentes) - Workflow refatorado`);
    console.log("üéØ Agentes: Dados, Prazos, Habilita√ß√£o, Compliance, Riscos, Financeiro, T√©cnico, Mercado");
    const service = new analysisService_1.EditalAnalysisService();
    try {
        console.log("üîß Inicializando servi√ßo...");
        console.log("‚úÖ Servi√ßo inicializado com sucesso");
        // Carregar documentos espec√≠ficos da pasta edital_maripora
        console.log("\nüìÇ CARREGANDO DOCUMENTOS");
        console.log("‚îÄ".repeat(50));
        const localDocuments = await loadMaritporaDocuments();
        if (localDocuments.length === 0) {
            console.error("‚ùå Nenhum documento PDF encontrado na pasta edital_maripora!");
            console.log("üí° Certifique-se de que os arquivos PDF est√£o na pasta backend/documents/edital_maripora/");
            return;
        }
        console.log(`\nüìä RESUMO DOS DOCUMENTOS CARREGADOS:`);
        localDocuments.forEach((doc, index) => {
            console.log(`  ${index + 1}. ${doc.filename} (${(doc.buffer.length / 1024).toFixed(2)} KB)`);
        });
        // Preparar request de an√°lise avan√ßada
        const mockRequest = {
            licitacaoId: "MARIPORA-90005-2025",
            empresaId: "ALICIT-DEMO", // Empresa fict√≠cia para testes
            documents: localDocuments
        };
        console.log("\nüîç INICIANDO AN√ÅLISE");
        console.log("‚îÄ".repeat(50));
        console.log(`üìã Licita√ß√£o ID: ${mockRequest.licitacaoId}`);
        console.log(`üè¢ Empresa ID: ${mockRequest.empresaId}`);
        console.log(`üìÑ Documentos a analisar: ${mockRequest.documents.length}`);
        // Verificar se edital j√° foi processado
        const alreadyProcessed = await service.isEditalProcessed(mockRequest.licitacaoId);
        console.log(`üîÑ Edital j√° processado: ${alreadyProcessed ? 'SIM' : 'N√ÉO'}`);
        console.log("\n‚öôÔ∏è Processando edital...");
        const startTime = Date.now();
        const result = await service.analyzeEdital(mockRequest);
        const endTime = Date.now();
        console.log("\n‚úÖ AN√ÅLISE CONCLU√çDA!");
        console.log("‚ïê".repeat(80));
        console.log(`‚è±Ô∏è Tempo de processamento: ${((endTime - startTime) / 1000).toFixed(2)}s`);
        console.log(`üìä Status: ${result.status}`);
        console.log(`üÜî Licita√ß√£o: ${result.licitacaoId}`);
        console.log(`üìÖ Processado em: ${result.processedAt}`);
        console.log(`ü§ñ Modo de an√°lise: AVAN√áADO (workflowAnalysis)`);
        console.log(`üë• Agentes utilizados: 8 agentes especializados`);
        // Score de valida√ß√£o avan√ßado
        if (result.validationScore !== undefined) {
            const score = result.validationScore;
            let qualidade;
            if (score >= 90)
                qualidade = 'üèÜ EXCELENTE';
            else if (score >= 75)
                qualidade = 'üü¢ MUITO BOM';
            else if (score >= 60)
                qualidade = 'üü° BOM';
            else
                qualidade = 'üî¥ BAIXA';
            console.log(`üîç Score de Valida√ß√£o Avan√ßado: ${score}/100 - ${qualidade}`);
        }
        if (result.pdfPath) {
            console.log(`üìë PDF gerado: ${result.pdfPath}`);
        }
        // Analisar o relat√≥rio final completo (nova estrutura)
        console.log("\nüìÑ RELAT√ìRIO COMPLETO (NOVA ESTRUTURA):");
        console.log("‚îÄ".repeat(80));
        if (result.finalReport) {
            const sections = result.finalReport.split('##');
            sections.forEach((section, index) => {
                if (section.trim() && index > 0) {
                    const title = section.split('\n')[0].trim();
                    const content = section.substring(section.indexOf('\n') + 1).trim();
                    console.log(`\nüî∏ ${title}`);
                    console.log("‚îÄ".repeat(40));
                    console.log(content.substring(0, 300) + (content.length > 300 ? "..." : ""));
                }
            });
        }
        // An√°lise espec√≠fica de cada agente (8 agentes especializados)
        console.log(`\nü§ñ AN√ÅLISE POR AGENTES ESPECIALIZADOS (8 agentes):`);
        console.log("‚îÄ".repeat(80));
        if (result.finalReport) {
            // Extrair se√ß√µes espec√≠ficas do novo formato
            const extractSection = (report, sectionTitle) => {
                const regex = new RegExp(`### ${sectionTitle}([\\s\\S]*?)(?=###|‚ïê‚ïê‚ïê|$)`, 'i');
                const match = report.match(regex);
                return match ? match[1].trim() : "N√£o encontrado";
            };
            // Agentes b√°sicos
            console.log("\nüìä DADOS B√ÅSICOS (dadosBasicosAgent):");
            console.log(extractSection(result.finalReport, 'IDENTIFICA√á√ÉO DO EDITAL').substring(0, 200) + "...");
            console.log("\n‚è∞ PRAZOS CR√çTICOS (prazosAgent):");
            console.log(extractSection(result.finalReport, 'PRAZOS CR√çTICOS').substring(0, 200) + "...");
            console.log("\nüìã HABILITA√á√ÉO (habilitacaoAgent):");
            console.log(extractSection(result.finalReport, 'REQUISITOS DE PARTICIPA√á√ÉO').substring(0, 200) + "...");
            console.log("\n‚öñÔ∏è COMPLIANCE (complianceAgent):");
            console.log(extractSection(result.finalReport, 'AN√ÅLISE DE CONFORMIDADE LEGAL').substring(0, 200) + "...");
            // Agentes avan√ßados sempre executam no workflow refatorado
            console.log("\nüõ°Ô∏è RISCOS (riscosAgent):");
            console.log(extractSection(result.finalReport, 'AN√ÅLISE DE RISCOS CONTRATUAIS').substring(0, 200) + "...");
            console.log("\nüí∞ FINANCEIRO (financeiroAgent):");
            console.log(extractSection(result.finalReport, 'VIABILIDADE FINANCEIRA').substring(0, 200) + "...");
            console.log("\nüîß T√âCNICO (tecnicoAgent):");
            console.log(extractSection(result.finalReport, 'CAPACIDADE T√âCNICA DA EMPRESA').substring(0, 200) + "...");
            console.log("\nüéØ MERCADO (mercadoAgent):");
            console.log(extractSection(result.finalReport, 'INTELIG√äNCIA COMPETITIVA').substring(0, 200) + "...");
        }
        // Testar consulta RAG com chunking sem√¢ntico
        console.log("\nüîç TESTANDO RAG COM CHUNKING SEM√ÇNTICO");
        console.log("‚îÄ".repeat(80));
        // Queries expandidas para testar todos os dom√≠nios
        const testQueries = {
            "üìä DADOS B√ÅSICOS": ["√≥rg√£o licitante", "modalidade preg√£o", "objeto licita√ß√£o", "valor estimado"],
            "‚è∞ PRAZOS": ["data abertura", "prazo questionamentos", "prazo impugna√ß√£o", "dias √∫teis"],
            "üìã HABILITA√á√ÉO": ["atestado capacidade t√©cnica", "√≠ndices financeiros", "certid√£o regularidade", "ME EPP"],
            "‚öñÔ∏è COMPLIANCE": ["especifica√ß√£o restritiva", "marca modelo exclusivo", "direcionamento", "v√≠cio edital"]
        };
        // Queries avan√ßadas sempre inclu√≠das no workflow refatorado
        testQueries["üõ°Ô∏è RISCOS"] = ["multa penalidade", "garantia cau√ß√£o", "rescis√£o contrato", "responsabilidade SLA"];
        testQueries["üí∞ FINANCEIRO"] = ["valor estimado", "forma pagamento", "reajuste pre√ßos", "margem lucro"];
        testQueries["üîß T√âCNICO"] = ["especifica√ß√£o t√©cnica", "equipe profissional", "certifica√ß√£o ISO", "infraestrutura"];
        testQueries["üéØ MERCADO"] = ["concorr√™ncia", "fornecedor similar", "hist√≥rico √≥rg√£o", "competitividade"];
        for (const [categoria, queries] of Object.entries(testQueries)) {
            console.log(`\n${categoria}:`);
            console.log("‚îÄ".repeat(50));
            for (const query of queries) {
                try {
                    console.log(`\nüîé "${query}"`);
                    const context = await service.queryEdital(mockRequest.licitacaoId, query, 3);
                    if (context.length > 0) {
                        console.log(`  ‚úÖ ${context.length} chunks | ${context[0].length} chars`);
                        console.log(`  üìù "${context[0].substring(0, 100).replace(/\n/g, ' ')}..."`);
                    }
                    else {
                        console.log(`  ‚ùå Nenhum resultado encontrado`);
                    }
                }
                catch (error) {
                    console.error(`  ‚ùå Erro: ${error}`);
                }
            }
        }
        // Teste de performance e estat√≠sticas RAG
        console.log("\nüìä ESTAT√çSTICAS DO SISTEMA RAG:");
        console.log("‚îÄ".repeat(50));
        try {
            const perfQueries = ["objeto", "prazo", "valor", "garantia", "penalidade"];
            let totalChunks = 0;
            let totalTime = 0;
            for (const query of perfQueries) {
                const startQuery = Date.now();
                const chunks = await service.queryEdital(mockRequest.licitacaoId, query, 5);
                const endQuery = Date.now();
                totalChunks += chunks.length;
                totalTime += (endQuery - startQuery);
            }
            console.log(`üîç Total queries testadas: ${perfQueries.length}`);
            console.log(`üìã Total chunks recuperados: ${totalChunks}`);
            console.log(`‚è±Ô∏è Tempo m√©dio por query: ${(totalTime / perfQueries.length).toFixed(0)}ms`);
            console.log(`üìä M√©dia chunks por query: ${(totalChunks / perfQueries.length).toFixed(1)}`);
        }
        catch (error) {
            console.error("‚ùå Erro nos testes de performance:", error);
        }
        // Valida√ß√£o final da arquitetura avan√ßada
        console.log("\nüîç VALIDA√á√ÉO DA ARQUITETURA AVAN√áADA:");
        console.log("‚îÄ".repeat(80));
        const validationChecks = {
            "‚úÖ Documentos reais processados": result.finalReport && !result.finalReport.includes("Conte√∫do simulado"),
            "‚úÖ 8 agentes especializados funcionando": result.finalReport && result.finalReport.includes("agentes especialistas"),
            "‚úÖ Chunking sem√¢ntico ativo": result.finalReport && result.finalReport.includes("chunking sem√¢ntico"),
            "‚úÖ Sistema RAG operacional": result.finalReport && result.finalReport.length > 1000,
            "‚úÖ Valida√ß√£o autom√°tica": result.validationScore !== undefined,
            "‚úÖ Workflow refatorado": result.finalReport && result.finalReport.includes("RELAT√ìRIO AVAN√áADO"),
            "‚úÖ An√°lise de riscos presente": result.finalReport && result.finalReport.includes("RISCOS CONTRATUAIS"),
            "‚úÖ An√°lise financeira presente": result.finalReport && result.finalReport.includes("VIABILIDADE FINANCEIRA"),
            "‚úÖ An√°lise t√©cnica presente": result.finalReport && result.finalReport.includes("CAPACIDADE T√âCNICA"),
            "‚úÖ Intelig√™ncia competitiva presente": result.finalReport && result.finalReport.includes("INTELIG√äNCIA COMPETITIVA"),
            "‚úÖ Score avan√ßado (‚â•70)": (result.validationScore || 0) >= 70
        };
        let passedChecks = 0;
        Object.entries(validationChecks).forEach(([check, passed]) => {
            console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check.replace(/^[‚úÖ‚ùå] /, '')}`);
            if (passed)
                passedChecks++;
        });
        const successRate = (passedChecks / Object.keys(validationChecks).length) * 100;
        console.log(`\nüìä Taxa de Sucesso: ${successRate.toFixed(0)}% (${passedChecks}/${Object.keys(validationChecks).length})`);
        // Mensagem final baseada no score
        console.log(`\nüìä RESULTADO FINAL (WORKFLOW REFATORADO):`);
        if (successRate >= 90) {
            console.log("üèÜ ARQUITETURA REFATORADA EXCELENTE - 8 agentes funcionando perfeitamente!");
        }
        else if (successRate >= 75) {
            console.log("üéâ ARQUITETURA REFATORADA FUNCIONANDO MUITO BEM!");
        }
        else if (successRate >= 60) {
            console.log("üëç ARQUITETURA REFATORADA FUNCIONAL - alguns ajustes recomendados");
        }
        else {
            console.log("‚ö†Ô∏è ARQUITETURA REFATORADA PRECISA DE MELHORIAS");
        }
        console.log(`\nüéØ Pr√≥ximos passos: Otimizar prompts dos agentes e scores de valida√ß√£o`);
        console.log("\nüéâ TESTE CONCLU√çDO!");
        console.log("‚ïê".repeat(80));
    }
    catch (error) {
        console.error("\n‚ùå ERRO NO TESTE:");
        console.error("‚ïê".repeat(80));
        console.error(error);
        if (error instanceof Error) {
            console.error("üìç Stack trace:", error.stack);
        }
    }
}
// Executar o teste
testEditalAnalysis();
