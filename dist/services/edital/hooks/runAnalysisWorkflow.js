"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runAnalysisWorkflow = runAnalysisWorkflow;
const extractReportSections_1 = require("./extractReportSections");
const RAGService_1 = require("../RAGService");
// Build a focused context using RAG queries and apply a hard cap
async function buildRagContext(rag, licitacaoId, queries, topK, maxChars) {
    const pieces = [];
    for (const q of queries) {
        try {
            const chunks = await rag.queryEdital(licitacaoId, q, topK);
            for (const chunk of chunks) {
                if (chunk && pieces.length < topK)
                    pieces.push(chunk);
            }
        }
        catch {
            // ignore individual query failures
        }
    }
    // Deduplicate and join
    const joined = Array.from(new Set(pieces))
        .join('\n\n---\n\n');
    // Hard cap
    if (joined.length > maxChars) {
        return joined.substring(0, maxChars) + '\n\n[... CONTEXTO TRUNCADO ...]';
    }
    return joined;
}
async function collectAISDKText(stream) {
    let text = '';
    for await (const part of stream.fullStream) {
        if (part?.type === 'text-delta' && typeof part.text === 'string') {
            text += part.text;
        }
    }
    return text;
}
async function runAnalysisWorkflow(documentsText, licitacaoId) {
    console.log(`üîß Executando an√°lise com contexto reduzido via RAG para ${licitacaoId}`);
    const rag = new RAGService_1.EditalRAGService();
    // Queries espec√≠ficas por agente
    const technicalQueries = [
        'identifica√ß√£o do edital √≥rg√£o licitante modalidade n√∫mero data publica√ß√£o objeto',
        'prazos cr√≠ticos data abertura hor√°rio questionamentos visitas impugna√ß√µes recursos in√≠cio execu√ß√£o',
        'habilita√ß√£o t√©cnica atestados quantitativos m√≠nimos unidades crit√©rios anexo se√ß√£o',
        'habilita√ß√£o econ√¥mico-financeira √≠ndices capital social patrim√¥nio l√≠quido f√≥rmulas',
        'habilita√ß√£o jur√≠dica fiscal cons√≥rcio ME EPP',
        'condi√ß√µes de execu√ß√£o prazos visita t√©cnica equipe SESMT frota equipamentos',
        'an√°lise econ√¥mica valor estimado pagamento cronograma documentos medi√ß√£o reajuste',
        'garantias proposta contratual percentual modalidades',
        'regras de disputa modo lances empate ME EPP',
        'penalidades multas rescis√£o'
    ];
    const impugnacaoQueries = [
        'exig√™ncias desproporcionais habilita√ß√£o t√©cnica quantitativos excessivos',
        'marca ou modelo espec√≠fico sem justificativa t√©cnica',
        'certifica√ß√µes desnecess√°rias ou excessivas',
        'prazos insuficientes para proposta',
        'crit√©rios de julgamento discriminat√≥rios',
        'direcionamento fornecedor espec√≠fico',
        'base legal Lei 8.666/93 Lei 14.133/21 TCU AGU'
    ];
    // Montar contextos reduzidos
    const MAX_CHARS = 12000;
    const TOP_K = 8;
    const technicalContext = await buildRagContext(rag, licitacaoId, technicalQueries, TOP_K, MAX_CHARS);
    const impugnacaoContext = await buildRagContext(rag, licitacaoId, impugnacaoQueries, TOP_K, MAX_CHARS);
    // Fallback: se n√£o houver contexto, usa trecho pequeno do texto original
    const fallback = () => {
        const joined = documentsText.join('\n\n---DOCUMENTO---\n\n');
        return joined.substring(0, Math.min(joined.length, MAX_CHARS));
    };
    const finalTechnicalContext = technicalContext || fallback();
    const finalImpugnacaoContext = impugnacaoContext || fallback();
    try {
        // TEMPOR√ÅRIO: Agentes antigos desabilitados para permitir teste do novo workflow
        // const editalAnalysisAgent = mastra.getAgent('editalAnalysisAgent');
        // const impugnacaoAgent = mastra.getAgent('impugnacaoAgent');
        throw new Error('Hook legado desabilitado - usando novo workflow multi-agente');
        /* C√ìDIGO LEGADO COMENTADO
        console.log('üîç Executando agente de an√°lise t√©cnica (streamVNext + aisdk) com RAG...');
        const technicalStream = await editalAnalysisAgent.streamVNext(
          `Analise o edital abaixo e gere um resumo t√©cnico ESTRUTURADO, transcrevendo fielmente os trechos e citando item/se√ß√£o/anexo de origem.\n\n${finalTechnicalContext}`,
          { format: 'aisdk' as const }
        );
        const technicalText = await collectAISDKText(technicalStream);
    
        console.log('‚öñÔ∏è Executando agente de impugna√ß√£o (streamVNext + aisdk) com RAG...');
        const impugnacaoStream = await impugnacaoAgent.streamVNext(
          `Identifique poss√≠veis v√≠cios para impugna√ß√£o com base na Lei 8.666/93 e Lei 14.133/21, TCU e AGU. Para cada ponto: base legal, jurisprud√™ncia, prazo, chance de sucesso e fundamenta√ß√£o.\n\n${finalImpugnacaoContext}`,
          { format: 'aisdk' as const }
        );
        const impugnacaoText = await collectAISDKText(impugnacaoStream);
        */
        // Return mock data para n√£o quebrar a interface
        const technicalText = 'Hook legado desabilitado';
        const impugnacaoText = 'Hook legado desabilitado';
        const finalReport = `
# Relat√≥rio de An√°lise de Edital

## Resumo T√©cnico
${technicalText || 'N√£o foi poss√≠vel gerar o resumo t√©cnico.'}

## An√°lise de Impugna√ß√£o
${impugnacaoText || 'N√£o foi poss√≠vel gerar a an√°lise de impugna√ß√£o.'}
`;
        return {
            finalReport,
            technicalSummary: (0, extractReportSections_1.extractTechnicalSummary)(finalReport),
            impugnacaoAnalysis: (0, extractReportSections_1.extractImpugnacaoAnalysis)(finalReport),
        };
    }
    catch (error) {
        console.error('‚ùå Erro na execu√ß√£o direta dos agentes:', error);
        return {
            finalReport: `# ERRO NA AN√ÅLISE\n\nOcorreu um erro ao analisar o edital: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
            technicalSummary: 'Erro na an√°lise.',
            impugnacaoAnalysis: 'Erro na an√°lise.',
        };
    }
}
