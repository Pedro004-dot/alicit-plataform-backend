"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditalChatService = void 0;
const openai_1 = __importDefault(require("openai"));
const RAGService_1 = require("./RAGService");
const openaiClient = new openai_1.default({
    apiKey: process.env.OPENAI_API_KEY,
});
class EditalChatService {
    constructor() {
        this.initialized = false;
        this.ragService = new RAGService_1.EditalRAGService();
    }
    async initialize() {
        if (!this.initialized) {
            await this.ragService.initialize();
            this.initialized = true;
        }
    }
    async chat(licitacaoId, query, empresaId) {
        try {
            await this.initialize();
            console.log(`üí¨ Iniciando chat - Licita√ß√£o: ${licitacaoId}, Query: ${query}`);
            // 1. Verificar se edital foi processado
            const isProcessed = await this.ragService.isEditalProcessed(licitacaoId);
            if (!isProcessed) {
                throw new Error(`Edital ${licitacaoId} n√£o foi processado ainda. Execute a an√°lise primeiro.`);
            }
            // 2. Buscar chunks relevantes usando estrat√©gia h√≠brida
            console.log(`üîç Buscando contexto relevante...`);
            const searchTerms = this.expandSearchTerms(query);
            console.log(`üîß Termos expandidos: ${searchTerms}`);
            // Primeira tentativa: busca vetorial normal
            let relevantChunks = await this.ragService.queryEdital(licitacaoId, searchTerms, 8);
            // Se busca para "objeto" n√£o encontrou chunks relevantes, tentar busca alternativa
            if (query.toLowerCase().includes('objeto') && this.isContextIrrelevant(relevantChunks, 'objeto')) {
                console.log(`üîÑ Chunks irrelevantes detectados, tentando busca alternativa...`);
                relevantChunks = await this.alternativeObjectSearch(licitacaoId);
            }
            if (!relevantChunks || relevantChunks.length === 0) {
                console.log(`‚ö†Ô∏è Nenhum contexto relevante encontrado para: ${query}`);
                return {
                    answer: "Desculpe, n√£o encontrei informa√ß√µes relevantes sobre sua pergunta nos documentos da licita√ß√£o. Tente reformular sua pergunta ou seja mais espec√≠fico.",
                    relevantChunks: [],
                    confidence: 0,
                    licitacaoId,
                    query
                };
            }
            console.log(`‚úÖ ${relevantChunks.length} chunks encontrados`);
            // 3. Preparar contexto para LLM
            const contextText = relevantChunks.join('\n\n---\n\n');
            // 4. Gerar resposta usando OpenAI
            const answer = await this.generateAnswer(query, contextText, licitacaoId);
            // 5. Calcular confidence simples baseado na quantidade de contexto
            const confidence = Math.min(95, Math.max(20, relevantChunks.length * 15));
            return {
                answer,
                relevantChunks,
                confidence,
                licitacaoId,
                query
            };
        }
        catch (error) {
            console.error(`‚ùå Erro no chat:`, error);
            throw new Error(`Erro no chat: ${error.message}`);
        }
    }
    async generateAnswer(query, context, licitacaoId) {
        try {
            console.log(`ü§ñ Gerando resposta com OpenAI...`);
            const systemPrompt = `Voc√™ √© um assistente especialista em an√°lise de licita√ß√µes p√∫blicas da Alicit.

CONTEXTO: Voc√™ est√° analisando a licita√ß√£o ${licitacaoId}.

INSTRU√á√ïES:
1. Responda APENAS com base no contexto fornecido dos documentos da licita√ß√£o
2. Seja preciso, t√©cnico e objetivo
3. Se n√£o encontrar a informa√ß√£o exata, analise o contexto dispon√≠vel e forne√ßa informa√ß√µes relacionadas
4. Use linguagem profissional mas acess√≠vel
5. Cite trechos espec√≠ficos do documento quando relevante
6. Para perguntas sobre OBJETO: procure por descri√ß√µes do que ser√° adquirido, contratado ou fornecido
7. Para perguntas sobre PRAZOS: foque em cronogramas, datas e per√≠odos
8. Para perguntas sobre VALORES: mencione custos, or√ßamentos e valores estimados
9. Se realmente n√£o houver informa√ß√£o relacionada, diga "N√£o encontrei essa informa√ß√£o espec√≠fica nos trechos analisados"

CONTEXTO DOS DOCUMENTOS:
${context}`;
            const response = await openaiClient.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: query }
                ],
                temperature: 0.3,
                max_tokens: 1000,
            });
            const answer = response.choices[0]?.message?.content || 'N√£o foi poss√≠vel gerar resposta.';
            console.log(`‚úÖ Resposta gerada com ${answer.length} caracteres`);
            return answer;
        }
        catch (error) {
            console.error(`‚ùå Erro ao gerar resposta OpenAI:`, error);
            throw new Error('Erro ao processar resposta da IA');
        }
    }
    expandSearchTerms(query) {
        // Mapear perguntas comuns para termos de busca mais espec√≠ficos
        const expandedTerms = query.toLowerCase();
        if (expandedTerms.includes('objeto') || expandedTerms.includes('escopo')) {
            return `${query} objeto do edital objeto da licita√ß√£o escopo aquisi√ß√£o fornecimento contrata√ß√£o`;
        }
        if (expandedTerms.includes('prazo') || expandedTerms.includes('entrega')) {
            return `${query} prazo entrega cronograma tempo dias √∫teis`;
        }
        if (expandedTerms.includes('valor') || expandedTerms.includes('pre√ßo')) {
            return `${query} valor estimado pre√ßo or√ßamento custo total`;
        }
        if (expandedTerms.includes('requisito') || expandedTerms.includes('qualifica√ß√£o')) {
            return `${query} requisitos qualifica√ß√£o habilita√ß√£o documenta√ß√£o exig√™ncias`;
        }
        return query; // Retorna query original se n√£o encontrar padr√µes
    }
    isContextIrrelevant(chunks, topic) {
        if (!chunks || chunks.length === 0)
            return true;
        // Verificar se chunks cont√™m principalmente informa√ß√µes sobre multas/penalidades
        const combinedText = chunks.join(' ').toLowerCase();
        const irrelevantKeywords = ['multa', 'penalidade', 'san√ß√£o', 'inexecu√ß√£o', 'descumprimento', 'advert√™ncia'];
        const relevantKeywords = topic === 'objeto' ? ['objeto', 'produto', 'servi√ßo', 'aquisi√ß√£o', 'fornecimento', 'contrata√ß√£o'] : [];
        const irrelevantCount = irrelevantKeywords.filter(word => combinedText.includes(word)).length;
        const relevantCount = relevantKeywords.filter(word => combinedText.includes(word)).length;
        // Se tem mais palavras irrelevantes que relevantes, considerar irrelevante
        return irrelevantCount > relevantCount && irrelevantCount > 3;
    }
    async alternativeObjectSearch(licitacaoId) {
        console.log(`üîß Tentando busca alternativa para objeto da licita√ß√£o...`);
        // Tentar buscar com termos mais espec√≠ficos
        const alternativeTerms = [
            'aquisi√ß√£o',
            'fornecimento',
            'contrata√ß√£o',
            'item',
            'especifica√ß√£o',
            'descri√ß√£o',
            'produto',
            'servi√ßo',
            'material'
        ];
        for (const term of alternativeTerms) {
            console.log(`üîç Testando termo: ${term}`);
            const chunks = await this.ragService.queryEdital(licitacaoId, term, 5);
            if (chunks && chunks.length > 0 && !this.isContextIrrelevant(chunks, 'objeto')) {
                console.log(`‚úÖ Encontrado contexto relevante com termo: ${term}`);
                return chunks;
            }
        }
        console.log(`‚ö†Ô∏è Busca alternativa n√£o encontrou contexto relevante`);
        return [];
    }
}
exports.EditalChatService = EditalChatService;
