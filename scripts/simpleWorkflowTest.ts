#!/usr/bin/env tsx

/**
 * TESTE SIMPLES DO WORKFLOW SEM DEPEND√äNCIAS EXTERNAS
 * 
 * Este script testa apenas o workflow sem inicializar depend√™ncias
 * como Pinecone ou Supabase que podem n√£o estar configuradas.
 */

async function testBasicWorkflowStructure() {
  console.log('üß™ Teste b√°sico da estrutura do workflow');
  console.log('==========================================');
  
  try {
    // Importar apenas a defini√ß√£o do workflow
    const { sequentialAnalysisWorkflow } = await import('../src/mastra/workflows/sequentialAnalysisWorkflowSimplified');
    
    console.log('1Ô∏è‚É£ Workflow importado com sucesso');
    console.log('   üè∑Ô∏è ID:', sequentialAnalysisWorkflow.id);
    console.log('   üìù Descri√ß√£o:', sequentialAnalysisWorkflow.description);
    
    // Verificar schemas
    if (sequentialAnalysisWorkflow.inputSchema) {
      console.log('2Ô∏è‚É£ Schema de entrada encontrado');
      console.log('   üìä Tipo:', typeof sequentialAnalysisWorkflow.inputSchema);
    } else {
      console.log('2Ô∏è‚É£ ‚ùå Schema de entrada n√£o encontrado');
    }
    
    if (sequentialAnalysisWorkflow.outputSchema) {
      console.log('3Ô∏è‚É£ Schema de sa√≠da encontrado');
      console.log('   üìä Tipo:', typeof sequentialAnalysisWorkflow.outputSchema);
    } else {
      console.log('3Ô∏è‚É£ ‚ùå Schema de sa√≠da n√£o encontrado');
    }
    
    console.log('\n‚úÖ ESTRUTURA DO WORKFLOW VALIDADA');
    console.log('O workflow est√° definido corretamente');
    
  } catch (error: any) {
    console.error('\n‚ùå ERRO AO IMPORTAR WORKFLOW:', error.message);
    console.error('üìã Stack:', error.stack);
  }
}

async function testAgentsImport() {
  console.log('\nü§ñ Teste de importa√ß√£o dos agentes');
  console.log('==================================');
  
  try {
    const { sequentialAgents } = await import('../src/mastra/agents/sequential');
    
    const agentNames = Object.keys(sequentialAgents);
    console.log('üìã Agentes importados:', agentNames);
    
    const expectedAgents = [
      'strategicFitAgent',
      'operationalAgent', 
      'legalDocAgent',
      'financialAgent'
    ];
    
    const missingAgents = expectedAgents.filter(agent => !agentNames.includes(agent));
    
    if (missingAgents.length === 0) {
      console.log('‚úÖ Todos os agentes necess√°rios foram importados');
    } else {
      console.log('‚ùå Agentes faltando:', missingAgents);
    }
    
    // Verificar estrutura de cada agente
    for (const [name, agent] of Object.entries(sequentialAgents)) {
      console.log(`   ü§ñ ${name}:`, typeof agent);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå ERRO AO IMPORTAR AGENTES:', error.message);
  }
}

async function runTests() {
  await testBasicWorkflowStructure();
  await testAgentsImport();
  
  console.log('\nüéØ CONCLUS√ÉO');
  console.log('===========');
  console.log('Se n√£o houve erros acima, a estrutura b√°sica est√° correta.');
  console.log('Para teste completo, configure as vari√°veis de ambiente:');
  console.log('- PINECONE_API_KEY');
  console.log('- OPENAI_API_KEY');
  console.log('- SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY');
}

// Executar se chamado diretamente
if (require.main === module) {
  runTests();
}

export { testBasicWorkflowStructure, testAgentsImport };