#!/usr/bin/env tsx

/**
 * SCRIPT DE TESTE PARA VERIFICAR REGISTRO DO WORKFLOW
 * 
 * Este script verifica se o workflow sequentialAnalysisWorkflow
 * est√° registrado corretamente no Mastra.
 */

import { mastra } from '../src/mastra';

async function testWorkflowRegistration() {
  console.log('üß™ Testando registro do workflow sequentialAnalysisWorkflow');
  console.log('========================================================');
  
  try {
    // 1. Verificar se o Mastra foi importado corretamente
    console.log('1Ô∏è‚É£ Verificando inst√¢ncia do Mastra...');
    console.log('   ‚úÖ Mastra importado com sucesso');
    
    // 2. Listar workflows registrados
    console.log('\n2Ô∏è‚É£ Listando workflows registrados...');
    const workflows = mastra.getWorkflows();
    const workflowNames = Object.keys(workflows);
    console.log('   üìã Workflows encontrados:', workflowNames);
    
    // 3. Verificar se o workflow espec√≠fico existe
    console.log('\n3Ô∏è‚É£ Verificando workflow espec√≠fico...');
    const targetWorkflow = 'sequentialAnalysisWorkflow';
    
    if (workflowNames.includes(targetWorkflow)) {
      console.log(`   ‚úÖ Workflow '${targetWorkflow}' encontrado!`);
      
      // 4. Tentar obter o workflow
      console.log('\n4Ô∏è‚É£ Obtendo inst√¢ncia do workflow...');
      const workflow = mastra.getWorkflow(targetWorkflow);
      console.log('   ‚úÖ Workflow obtido com sucesso');
      console.log('   üè∑Ô∏è ID:', workflow.id);
      console.log('   üìù Descri√ß√£o:', workflow.description);
      
      // 5. Verificar estrutura do workflow
      console.log('\n5Ô∏è‚É£ Verificando estrutura do workflow...');
      console.log('   üìä Schema de entrada definido:', !!workflow.inputSchema);
      console.log('   üìä Schema de sa√≠da definido:', !!workflow.outputSchema);
      
      // 6. Tentar criar um run (sem executar)
      console.log('\n6Ô∏è‚É£ Testando cria√ß√£o de run...');
      const run = await workflow.createRunAsync();
      console.log('   ‚úÖ Run criado com sucesso');
      console.log('   üÜî Run criado');
      
      console.log('\nüéâ TODOS OS TESTES PASSARAM!');
      console.log('‚úÖ O workflow est√° registrado e funcional');
      
    } else {
      console.log(`   ‚ùå Workflow '${targetWorkflow}' N√ÉO encontrado!`);
      console.log('   üí° Workflows dispon√≠veis:', workflowNames);
      
      console.log('\nüîç DIAGN√ìSTICO:');
      console.log('‚ùå O workflow n√£o est√° registrado corretamente');
      console.log('üí° Poss√≠veis causas:');
      console.log('   - Erro na importa√ß√£o do workflow');
      console.log('   - Erro na configura√ß√£o do Mastra');
      console.log('   - Nome do workflow incorreto');
    }
    
  } catch (error: any) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    console.error('üìã Stack trace:', error.stack);
    
    console.log('\nüí° POSS√çVEIS SOLU√á√ïES:');
    console.log('1. Verificar se todas as depend√™ncias est√£o instaladas');
    console.log('2. Verificar se h√° erros de sintaxe nos arquivos do workflow');
    console.log('3. Verificar se as importa√ß√µes est√£o corretas');
    console.log('4. Verificar se o banco de dados SQLite est√° acess√≠vel');
  }
}

// Teste adicional para agentes
async function testAgentsRegistration() {
  console.log('\nü§ñ Testando registro dos agentes...');
  console.log('===================================');
  
  try {
    const agents = mastra.getAgents();
    const agentNames = Object.keys(agents);
    console.log('üìã Agentes registrados:', agentNames);
    
    const expectedAgents = [
      'strategicFitAgent',
      'operationalAgent', 
      'legalDocAgent',
      'financialAgent'
    ];
    
    const missingAgents = expectedAgents.filter(agent => !agentNames.includes(agent));
    
    if (missingAgents.length === 0) {
      console.log('‚úÖ Todos os agentes necess√°rios est√£o registrados');
    } else {
      console.log('‚ùå Agentes faltando:', missingAgents);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar agentes:', error);
  }
}

// Executar testes
async function runTests() {
  await testWorkflowRegistration();
  await testAgentsRegistration();
}

// Executar se chamado diretamente
if (require.main === module) {
  runTests();
}

export { testWorkflowRegistration, testAgentsRegistration };