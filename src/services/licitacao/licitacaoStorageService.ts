import pineconeLicitacaoRepository from '../../repositories/pineconeLicitacaoRepository';
import supabaseLicitacaoRepository from '../../repositories/supabaseLicitacaoRepository';
import coordinateEnrichmentService from './coordinateEnrichmentService';

// Interfaces iguais aos reposit√≥rios (mant√©m compatibilidade)
interface PNCPItem {
  numeroItem: number;
  descricao: string;
  materialOuServico: string;
  materialOuServicoNome: string;
  valorUnitarioEstimado: number;
  valorTotal: number;
  quantidade: number;
  unidadeMedida: string;
  orcamentoSigiloso: boolean;
  itemCategoriaId: number;
  itemCategoriaNome: string;
  patrimonio: any;
  codigoRegistroImobiliario: any;
  criterioJulgamentoId: number;
  criterioJulgamentoNome: string;
  situacaoCompraItem: number;
  situacaoCompraItemNome: string;
  tipoBeneficio: number;
  tipoBeneficioNome: string;
  incentivoProdutivoBasico: boolean;
  dataInclusao: string;
  dataAtualizacao: string;
  temResultado: boolean;
  imagem: number;
  aplicabilidadeMargemPreferenciaNormal: boolean;
  aplicabilidadeMargemPreferenciaAdicional: boolean;
  percentualMargemPreferenciaNormal: any;
  percentualMargemPreferenciaAdicional: any;
  ncmNbsCodigo: any;
  ncmNbsDescricao: any;
  catalogo: any;
  categoriaItemCatalogo: any;
  catalogoCodigoItem: any;
  informacaoComplementar: any;
  tipoMargemPreferencia: any;
  exigenciaConteudoNacional: boolean;
}

interface PNCPLicitacao {
  numeroControlePNCP: string;
  dataAtualizacaoGlobal: string;
  modalidadeId: number;
  srp: boolean;
  orgaoEntidade: {
    cnpj: string;
    razaoSocial: string;
    poderId: string;
    esferaId: string;
  };
  anoCompra: number;
  sequencialCompra: number;
  dataInclusao: string;
  dataPublicacaoPncp: string;
  dataAtualizacao: string;
  numeroCompra: string;
  unidadeOrgao: {
    ufNome: string;
    codigoIbge: string;
    codigoUnidade: string;
    nomeUnidade: string;
    ufSigla: string;
    municipioNome: string;
  };
  amparoLegal: {
    descricao: string;
    nome: string;
    codigo: number;
  };
  dataAberturaProposta: string;
  dataEncerramentoProposta: string;
  informacaoComplementar: string;
  processo: string;
  objetoCompra: string;
  linkSistemaOrigem: string;
  justificativaPresencial: string | null;
  unidadeSubRogada: any;
  orgaoSubRogado: any;
  valorTotalHomologado: number | null;
  modoDisputaId: number;
  linkProcessoEletronico: string | null;
  valorTotalEstimado: number;
  modalidadeNome: string;
  modoDisputaNome: string;
  tipoInstrumentoConvocatorioCodigo: number;
  tipoInstrumentoConvocatorioNome: string;
  fontesOrcamentarias: any[];
  situacaoCompraId: number;
  situacaoCompraNome: string;
  usuarioNome: string;
  itens: PNCPItem[];
  // Campos de coordenadas (adicionados pelo enriquecimento)
  latitude?: number;
  longitude?: number;
}

interface StorageResult {
  supabase: number;
  pinecone: number;
  total: number;
  success: boolean;
  errors?: string[];
}

interface SearchParams {
  texto?: string;
  valorMin?: number;
  valorMax?: number;
  modalidade?: string;
  uf?: string;
  municipio?: string;
  dataInicio?: string;
  dataFim?: string;
  situacao?: string;
  limit?: number;
}

/**
 * Servi√ßo SIMPLIFICADO de coordena√ß√£o para opera√ß√µes em ambos os bancos
 * FLUXO LINEAR: Recebe ‚Üí Filtra duplicatas ‚Üí Salva Supabase ‚Üí Salva Pinecone
 */
class LicitacaoStorageService {
  
  /**
   * M√âTODO PRINCIPAL - √öNICO PONTO DE ENTRADA
   * Fluxo simplificado: Filtra duplicatas ‚Üí Salva Supabase ‚Üí Salva Pinecone
   */
  async saveLicitacoes(licitacoes: PNCPLicitacao[]): Promise<StorageResult> {
    console.log(`üîÑ Salvando ${licitacoes.length} licita√ß√µes (fluxo simplificado)...`);
    
    if (licitacoes.length === 0) {
      return { supabase: 0, pinecone: 0, total: 0, success: true };
    }
    
    try {
      // 1. FILTRAR APENAS AS QUE N√ÉO EXISTEM NO SUPABASE (√∫nica verifica√ß√£o)
      const novasLicitacoes = await this.filterNewLicitacoes(licitacoes);
      
      if (novasLicitacoes.length === 0) {
        console.log(`‚úÖ Todas as ${licitacoes.length} licita√ß√µes j√° existem no Supabase`);
        return { supabase: 0, pinecone: 0, total: 0, success: true };
      }
      
      console.log(`üìä ${novasLicitacoes.length}/${licitacoes.length} s√£o novas, salvando...`);
      
      // 2. ENRIQUECER COM COORDENADAS (baseado em codigo_ibge)
      const licitacoesEnriquecidas = await coordinateEnrichmentService.enrichLicitacoesWithCoordinates(novasLicitacoes);
      
      // 3. SALVAR NO SUPABASE (dados estruturais)
      console.log(`üíæ Salvando ${licitacoesEnriquecidas.length} licita√ß√µes no Supabase...`);
      const supabaseResult = await supabaseLicitacaoRepository.saveLicitacoes(licitacoesEnriquecidas as PNCPLicitacao[]);
      console.log(`‚úÖ Supabase: ${supabaseResult}/${licitacoesEnriquecidas.length} salvas`);
      
      // 4. SALVAR NO PINECONE (embeddings) - COM ROLLBACK SE FALHAR
      console.log(`üéØ Salvando ${licitacoesEnriquecidas.length} embeddings no Pinecone...`);
      let pineconeResult = 0;
      
      try {
        pineconeResult = await pineconeLicitacaoRepository.saveLicitacoes(licitacoesEnriquecidas as PNCPLicitacao[]);
        console.log(`‚úÖ Pinecone: ${pineconeResult}/${licitacoesEnriquecidas.length} embeddings salvos`);
        
        // ‚úÖ SUCESSO: Ambos os bancos salvaram
        return {
          supabase: supabaseResult,
          pinecone: pineconeResult,
          total: Math.max(supabaseResult, pineconeResult),
          success: true
        };
        
      } catch (pineconeError) {
        console.error(`‚ùå FALHA no Pinecone:`, pineconeError);
        
        await this.rollbackSupabase(licitacoesEnriquecidas as PNCPLicitacao[]);
        
        return {
          supabase: 0, 
          pinecone: 0,
          total: 0,
          success: false,
          errors: [`Pinecone falhou: ${pineconeError}. Rollback executado.`]
        };
      }
      
    } catch (error) {
      console.error(`‚ùå Erro no fluxo de salvamento:`, error);
      return {
        supabase: 0,
        pinecone: 0,
        total: 0,
        success: false,
        errors: [String(error)]
      };
    }
  }
  
  /**
   * M√âTODO PRIVADO: Rollback - Deletar licita√ß√µes do Supabase em caso de falha no Pinecone
   */
  private async rollbackSupabase(licitacoes: PNCPLicitacao[]): Promise<void> {
    try {
      const ids = licitacoes.map(l => l.numeroControlePNCP);
      console.log(`üóëÔ∏è Deletando ${ids.length} licita√ß√µes do Supabase para rollback...`);
      
      // Deletar itens primeiro (FK constraint)
      await supabaseLicitacaoRepository.deleteItemsByLicitacaoIds(ids);
      
      // Depois deletar licita√ß√µes
      await supabaseLicitacaoRepository.deleteLicitacoesByIds(ids);
      
      console.log(`‚úÖ Rollback conclu√≠do: ${ids.length} licita√ß√µes removidas do Supabase`);
      
    } catch (rollbackError) {
      console.error(`‚ùå ERRO CR√çTICO no rollback:`, rollbackError);
      console.error(`‚ö†Ô∏è ATEN√á√ÉO: Dados podem estar inconsistentes entre Supabase e Pinecone!`);
      // N√£o propagar erro do rollback para n√£o mascarar o erro original
    }
  }
  
  /**
   * VERIFICA√á√ÉO SIMPLES - APENAS SUPABASE (fonte da verdade)
   */
  private async filterNewLicitacoes(licitacoes: PNCPLicitacao[]): Promise<PNCPLicitacao[]> {
    console.log(`üîç [STORAGE DEBUG] Iniciando verifica√ß√£o de duplicatas para ${licitacoes.length} licita√ß√µes...`);
    
    try {
      const startTime = Date.now();
      const ids = licitacoes.map(l => l.numeroControlePNCP);
      console.log(`üìã [STORAGE DEBUG] IDs extra√≠dos: ${ids.length} (${Date.now() - startTime}ms)`);
      
      console.log(`üîç [STORAGE DEBUG] Chamando supabaseLicitacaoRepository.getExistingIds()...`);
      const existingIds = await supabaseLicitacaoRepository.getExistingIds(ids);
      const checkTime = Date.now() - startTime;
      console.log(`‚úÖ [STORAGE DEBUG] Verifica√ß√£o conclu√≠da: ${existingIds.size} existentes (${checkTime}ms)`);
      
      const novasLicitacoes = licitacoes.filter(l => !existingIds.has(l.numeroControlePNCP));
      const filterTime = Date.now() - startTime;
      
      console.log(`‚úÖ [STORAGE DEBUG] Filtro completo: ${licitacoes.length} ‚Üí ${novasLicitacoes.length} novas (${filterTime}ms total)`);
      return novasLicitacoes;
      
    } catch (error) {
      console.error(`‚ùå [STORAGE DEBUG] ERRO na verifica√ß√£o de duplicatas:`, error);
      console.error(`‚ùå [STORAGE DEBUG] Stack trace:`, error instanceof Error ? error.stack : 'N√£o dispon√≠vel');
      
      // Em caso de erro, retornar todas para n√£o perder dados
      console.log(`‚ö†Ô∏è [STORAGE DEBUG] Retornando todas as licita√ß√µes devido ao erro`);
      return licitacoes;
    }
  }
  
  /**
   * Busca h√≠brida: sem√¢ntica (Pinecone) + estruturada (Supabase)
   * @param query Termo de busca para busca sem√¢ntica
   * @param filters Filtros estruturais
   * @returns Array de licita√ß√µes encontradas
   */
  async buscarLicitacoes(query?: string, filters?: SearchParams): Promise<PNCPLicitacao[]> {
    try {
      console.log('üîç LicitacaoStorageService: Iniciando busca h√≠brida...');
      
      // Estrat√©gia 1: Se h√° query significativa, usar busca sem√¢ntica + dados do Supabase
      if (query && query.trim().length > 3) {
        console.log(`üéØ Busca sem√¢ntica para: "${query}"`);
        
        // Buscar IDs relevantes no Pinecone
        const idsRelevantes = await pineconeLicitacaoRepository.buscarIdsRelevantes(query);
        
        if (idsRelevantes.length > 0) {
          console.log(`üìã Encontrou ${idsRelevantes.length} IDs relevantes, buscando dados no Supabase...`);
          
          // Buscar dados completos no Supabase
          const licitacoes = await supabaseLicitacaoRepository.getLicitacoesByIds(idsRelevantes);
          
          console.log(`‚úÖ Busca h√≠brida retornou ${licitacoes.length} licita√ß√µes`);
          return licitacoes;
        } else {
          console.log('‚ö†Ô∏è Busca sem√¢ntica n√£o encontrou resultados relevantes');
        }
      }
      
      // Estrat√©gia 2: Busca estruturada no Supabase (filtros, texto simples)
      console.log('üóÉÔ∏è Usando busca estruturada no Supabase...');
      
      const searchParams = {
        texto: query,
        ...filters
      };
      
      const licitacoes = await supabaseLicitacaoRepository.findWithFilters(searchParams);
      
      console.log(`‚úÖ Busca estruturada retornou ${licitacoes.length} licita√ß√µes`);
      return licitacoes;
      
    } catch (error) {
      console.error('‚ùå Erro na busca h√≠brida:', error);
      return [];
    }
  }
  
  /**
   * Obt√©m licita√ß√£o por ID (sempre do Supabase - mais r√°pido)
   * @param numeroControlePNCP ID da licita√ß√£o
   * @returns Licita√ß√£o encontrada ou null
   */
  async getLicitacao(numeroControlePNCP: string): Promise<PNCPLicitacao | null> {
    try {
      console.log(`üîç Buscando licita√ß√£o ${numeroControlePNCP} no Supabase...`);
      
      // Priorizar Supabase (mais r√°pido para busca por ID)
      let licitacao = await supabaseLicitacaoRepository.getLicitacao(numeroControlePNCP);
      
      if (licitacao) {
        console.log(`‚úÖ Licita√ß√£o ${numeroControlePNCP} encontrada no Supabase`);
        return licitacao;
      }
      
      // Fallback para Pinecone se n√£o encontrar no Supabase
      console.log(`‚ö†Ô∏è Licita√ß√£o ${numeroControlePNCP} n√£o encontrada no Supabase, tentando Pinecone...`);
      licitacao = await pineconeLicitacaoRepository.getLicitacao(numeroControlePNCP);
      
      if (licitacao) {
        console.log(`‚úÖ Licita√ß√£o ${numeroControlePNCP} encontrada no Pinecone (fallback)`);
        return licitacao;
      }
      
      console.log(`‚ùå Licita√ß√£o ${numeroControlePNCP} n√£o encontrada em nenhum banco`);
      return null;
      
    } catch (error) {
      console.error(`‚ùå Erro ao buscar licita√ß√£o ${numeroControlePNCP}:`, error);
      return null;
    }
  }
  
  /**
   * Obt√©m todas as licita√ß√µes (sempre do Supabase - mais eficiente)
   * @returns Array de todas as licita√ß√µes
   */
  async getAllLicitacoes(): Promise<PNCPLicitacao[]> {
    try {
      console.log('üìã Buscando todas as licita√ß√µes no Supabase...');
      
      // Priorizar Supabase (mais eficiente para listagem completa)
      const licitacoes = await supabaseLicitacaoRepository.getAllLicitacoes();
      
      if (licitacoes.length > 0) {
        console.log(`‚úÖ Encontrou ${licitacoes.length} licita√ß√µes no Supabase`);
        return licitacoes;
      }
      
      // Fallback para Pinecone se Supabase estiver vazio
      console.log('‚ö†Ô∏è Supabase vazio, tentando Pinecone como fallback...');
      const licitacoesPinecone = await pineconeLicitacaoRepository.getAllLicitacoes();
      
      console.log(`üìä Fallback Pinecone retornou ${licitacoesPinecone.length} licita√ß√µes`);
      return licitacoesPinecone;
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar todas as licita√ß√µes:', error);
      return [];
    }
  }
  
  // REMOVIDOS: M√©todos complexos de verifica√ß√£o de duplicatas
  // Agora usa apenas filterNewLicitacoes() que verifica s√≥ no Supabase
  
  /**
   * Obt√©m estat√≠sticas dos bancos de dados
   * @returns Estat√≠sticas detalhadas
   */
  async getStorageStats(): Promise<any> {
    try {
      console.log('üìä Coletando estat√≠sticas dos bancos...');
      
      const [supabaseStats, pineconeStats] = await Promise.allSettled([
        this.getSupabaseStats(),
        this.getPineconeStats()
      ]);
      
      return {
        supabase: supabaseStats.status === 'fulfilled' ? supabaseStats.value : { error: supabaseStats.reason },
        pinecone: pineconeStats.status === 'fulfilled' ? pineconeStats.value : { error: pineconeStats.reason },
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao coletar estat√≠sticas:', error);
      return { error: error };
    }
  }
  
  private async getSupabaseStats(): Promise<any> {
    // Implementar contagem de registros no Supabase
    const licitacoes = await supabaseLicitacaoRepository.getAllLicitacoes();
    return {
      totalLicitacoes: licitacoes.length,
      source: 'supabase'
    };
  }
  
  private async getPineconeStats(): Promise<any> {
    // Usar m√©todos existentes do Pinecone
    return await pineconeLicitacaoRepository.getIndexStats();
  }
}

// Export singleton
const licitacaoStorageService = new LicitacaoStorageService();

export default licitacaoStorageService;
export { LicitacaoStorageService, StorageResult, SearchParams };
