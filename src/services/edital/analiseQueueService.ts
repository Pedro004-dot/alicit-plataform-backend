import analiseQueueRepository from "../../repositories/analiseQueueRepository";
import { EditalAnalysisService } from "./analysisService";

const LIMITE_ANALISES_SIMULTANEAS = 3;

interface StatusAnalise {
  status: 'pendente' | 'processando' | 'concluida' | 'erro';
  posicaoFila?: number;
  tempoEstimado?: number;
  erro?: string;
}

class AnaliseQueueService {
  private editalAnalysisService: EditalAnalysisService;

  constructor() {
    this.editalAnalysisService = new EditalAnalysisService();
  }

  async adicionarAnalise(numeroControlePNCP: string, empresaCnpj: string): Promise<void> {
    try {
      // Verificar se j√° existe an√°lise para esta licita√ß√£o
      const analiseExistente = await analiseQueueRepository.buscarPorNumeroControle(numeroControlePNCP);
      
      if (analiseExistente && (analiseExistente.status === 'pendente' || analiseExistente.status === 'processando')) {
        console.log(`‚ö†Ô∏è An√°lise j√° existe para ${numeroControlePNCP} com status: ${analiseExistente.status}`);
        return;
      }

      // Criar nova an√°lise na fila
      const novaAnalise = await analiseQueueRepository.criar({
        numeroControlePNCP,
        empresaCnpj
      });

      console.log(`üìã Nova an√°lise adicionada √† fila: ${novaAnalise.id}`);

      // Verificar se pode processar imediatamente
      await this.processarFilaSeNecessario();

    } catch (error) {
      console.error('‚ùå Erro ao adicionar an√°lise √† fila:', error);
      throw error;
    }
  }

  async buscarStatusAnalise(numeroControlePNCP: string): Promise<StatusAnalise> {
    try {
      const analise = await analiseQueueRepository.buscarPorNumeroControle(numeroControlePNCP);

      if (!analise) {
        return { status: 'erro', erro: 'An√°lise n√£o encontrada' };
      }

      const status: StatusAnalise = {
        status: analise.status as any
      };

      // Calcular posi√ß√£o na fila se pendente
      if (analise.status === 'pendente') {
        const posicao = await analiseQueueRepository.calcularPosicaoFila(analise.id);
        status.posicaoFila = posicao;
        status.tempoEstimado = posicao * 2; // Estimativa: 2 min por an√°lise
      }

      // Adicionar detalhes do erro se houver
      if (analise.status === 'erro' && analise.erro_detalhes) {
        status.erro = analise.erro_detalhes;
      }

      return status;

    } catch (error) {
      console.error('‚ùå Erro ao buscar status da an√°lise:', error);
      return { status: 'erro', erro: 'Erro interno do servidor' };
    }
  }

  private async processarFilaSeNecessario(): Promise<void> {
    try {
      // Contar quantas an√°lises est√£o processando atualmente
      const processandoAtualmente = await analiseQueueRepository.contarPorStatus('processando');

      if (processandoAtualmente < LIMITE_ANALISES_SIMULTANEAS) {
        // Buscar pr√≥xima an√°lise pendente
        const proximaAnalise = await analiseQueueRepository.buscarProximaPendente();

        if (proximaAnalise) {
          console.log(`üöÄ Iniciando processamento da an√°lise: ${proximaAnalise.id}`);
          
          // Processar em background sem aguardar
          this.processarAnaliseBackground(proximaAnalise).catch(error => {
            console.error('‚ùå Erro no processamento em background:', error);
          });
        }
      } else {
        console.log(`‚è≥ Limite atingido: ${processandoAtualmente}/${LIMITE_ANALISES_SIMULTANEAS} an√°lises processando`);
      }

    } catch (error) {
      console.error('‚ùå Erro ao processar fila:', error);
    }
  }

  private async processarAnaliseBackground(analise: any): Promise<void> {
    try {
      // Marcar como processando
      await analiseQueueRepository.atualizarStatus(analise.id, 'processando');
      console.log(`‚ö° An√°lise iniciada: ${analise.numero_controle_pncp}`);

      // Executar an√°lise usando o sistema atual
      await this.executarAnaliseCompleta(analise);

      // Marcar como conclu√≠da
      await analiseQueueRepository.atualizarStatus(analise.id, 'concluida');
      console.log(`‚úÖ An√°lise conclu√≠da: ${analise.numero_controle_pncp}`);

    } catch (error) {
      console.error(`‚ùå Erro na an√°lise ${analise.numero_controle_pncp}:`, error);
      
      // Salvar erro no banco
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      await analiseQueueRepository.salvarErro(analise.id, errorMessage);
      
    } finally {
      // Sempre tentar processar pr√≥xima da fila
      setTimeout(() => {
        this.processarFilaSeNecessario();
      }, 1000);
    }
  }

  private async executarAnaliseCompleta(analise: any): Promise<void> {
    // Integra√ß√£o com o sistema atual de an√°lises
    const requestData = {
      licitacaoId: analise.numero_controle_pncp,
      empresaCNPJ: analise.empresa_cnpj
    };

    // Chamar o servi√ßo atual de an√°lise
    const resultado = await this.editalAnalysisService.analyzeEdital(requestData);
    
    console.log(`üìä Resultado da an√°lise para ${analise.numero_controle_pncp}:`, resultado);
  }
}

export default new AnaliseQueueService();