import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

/**
 * INVESTIGAR LICITA√á√ïES COM COORDENADAS NULAS
 * Descobrir por que algumas licita√ß√µes ainda t√™m lat/lng null ap√≥s enriquecimento
 */
async function investigateLicitacoesNullas() {
  console.log('üîç INVESTIGANDO LICITA√á√ïES COM COORDENADAS NULAS\n');

  try {
    // 1. Contar licita√ß√µes por status
    await checkStatusGeral();

    // 2. Investigar licita√ß√µes recentes sem coordenadas
    await investigarLicitacoesRecentes();

    // 3. Analisar c√≥digos IBGE problem√°ticos
    await analisarCodigosIbgeProblematicos();

    // 4. Testar processo de enriquecimento manualmente
    await testarEnriquecimentoManual();

  } catch (error) {
    console.error('‚ùå Erro na investiga√ß√£o:', error);
  }
}

async function checkStatusGeral(): Promise<void> {
  console.log('üìä STATUS GERAL DAS COORDENADAS...');

  try {
    // Total de licita√ß√µes
    const { count: total } = await supabase
      .from('licitacoes')
      .select('*', { count: 'exact', head: true });

    // Com coordenadas
    const { count: comCoords } = await supabase
      .from('licitacoes')
      .select('*', { count: 'exact', head: true })
      .not('latitude', 'is', null)
      .not('longitude', 'is', null);

    // Sem coordenadas mas com IBGE
    const { count: semCoordsComIbge } = await supabase
      .from('licitacoes')
      .select('*', { count: 'exact', head: true })
      .is('latitude', null)
      .not('codigo_ibge', 'is', null);

    // Sem coordenadas e sem IBGE
    const { count: semCoordseSemIbge } = await supabase
      .from('licitacoes')
      .select('*', { count: 'exact', head: true })
      .is('latitude', null)
      .is('codigo_ibge', null);

    console.log(`üìà Total de licita√ß√µes: ${total || 0}`);
    console.log(`‚úÖ Com coordenadas: ${comCoords || 0} (${((comCoords || 0) / (total || 1) * 100).toFixed(1)}%)`);
    console.log(`üîÑ Sem coordenadas (com IBGE): ${semCoordsComIbge || 0}`);
    console.log(`‚ùå Sem coordenadas (sem IBGE): ${semCoordseSemIbge || 0}`);

  } catch (error) {
    console.error('‚ùå Erro ao verificar status geral:', error);
  }

  console.log('');
}

async function investigarLicitacoesRecentes(): Promise<void> {
  console.log('üïê INVESTIGANDO LICITA√á√ïES RECENTES SEM COORDENADAS...');

  try {
    // Buscar as 10 licita√ß√µes mais recentes sem coordenadas
    const { data: licitacoes, error } = await supabase
      .from('licitacoes')
      .select('numero_controle_pncp, codigo_ibge, municipio_nome, uf_nome, data_inclusao, created_at')
      .is('latitude', null)
      .order('created_at', { ascending: false })
      .limit(10);

    if (error) {
      console.error('‚ùå Erro ao buscar licita√ß√µes recentes:', error);
      return;
    }

    if (!licitacoes || licitacoes.length === 0) {
      console.log('‚úÖ Nenhuma licita√ß√£o recente sem coordenadas!');
      return;
    }

    console.log(`üìã ${licitacoes.length} licita√ß√µes recentes sem coordenadas:`);

    for (const licitacao of licitacoes) {
      console.log(`\nüîç ${licitacao.numero_controle_pncp}:`);
      console.log(`   Munic√≠pio: ${licitacao.municipio_nome || 'NULO'}`);
      console.log(`   UF: ${licitacao.uf_nome || 'NULO'}`);
      console.log(`   C√≥digo IBGE: ${licitacao.codigo_ibge || 'NULO'}`);
      console.log(`   Criado em: ${licitacao.created_at}`);

      // Verificar se o c√≥digo IBGE existe na tabela munic√≠pios
      if (licitacao.codigo_ibge) {
        const { data: municipio } = await supabase
          .from('municipios')
          .select('nome, codigo_uf, latitude, longitude')
          .eq('codigo_ibge', licitacao.codigo_ibge)
          .single();

        if (municipio) {
          console.log(`   ‚úÖ IBGE encontrado: ${municipio.nome} (${municipio.codigo_uf}) - ${municipio.latitude}, ${municipio.longitude}`);
          console.log(`   ‚ùó PROBLEMA: Munic√≠pio existe mas licita√ß√£o n√£o foi enriquecida!`);
        } else {
          console.log(`   ‚ùå IBGE ${licitacao.codigo_ibge} n√£o encontrado na tabela munic√≠pios`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è Licita√ß√£o sem c√≥digo IBGE`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro ao investigar licita√ß√µes recentes:', error);
  }

  console.log('');
}

async function analisarCodigosIbgeProblematicos(): Promise<void> {
  console.log('üîç ANALISANDO C√ìDIGOS IBGE PROBLEM√ÅTICOS...');

  try {
    // Buscar c√≥digos IBGE mais frequentes sem coordenadas
    const { data: licitacoes } = await supabase
      .from('licitacoes')
      .select('codigo_ibge, municipio_nome')
      .is('latitude', null)
      .not('codigo_ibge', 'is', null);

    if (!licitacoes || licitacoes.length === 0) {
      console.log('‚úÖ Nenhuma licita√ß√£o com c√≥digo IBGE sem coordenadas!');
      return;
    }

    // Contar frequ√™ncia
    const frequencia = new Map<string, { count: number; municipio: string }>();

    for (const item of licitacoes) {
      const key = item.codigo_ibge;
      if (frequencia.has(key)) {
        frequencia.get(key)!.count++;
      } else {
        frequencia.set(key, {
          count: 1,
          municipio: item.municipio_nome || 'N/A'
        });
      }
    }

    // Ordenar por frequ√™ncia
    const sorted = Array.from(frequencia.entries())
      .sort((a, b) => b[1].count - a[1].count)
      .slice(0, 5);

    console.log('üìä TOP 5 C√ìDIGOS IBGE PROBLEM√ÅTICOS:');
    for (const [codigo, info] of sorted) {
      console.log(`\nüîç IBGE ${codigo}: ${info.count}x - ${info.municipio}`);
      
      // Verificar se existe na tabela munic√≠pios
      const { data: municipio } = await supabase
        .from('municipios')
        .select('nome, codigo_uf')
        .eq('codigo_ibge', codigo)
        .single();

      if (municipio) {
        console.log(`   ‚úÖ Existe: ${municipio.nome} (${municipio.codigo_uf})`);
        console.log(`   ‚ùó PROBLEMA: Enriquecimento n√£o funcionou para este IBGE`);
      } else {
        console.log(`   ‚ùå N√£o existe na tabela munic√≠pios`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro ao analisar c√≥digos IBGE:', error);
  }

  console.log('');
}

async function testarEnriquecimentoManual(): Promise<void> {
  console.log('üß™ TESTANDO ENRIQUECIMENTO MANUAL...');

  try {
    // Buscar uma licita√ß√£o sem coordenadas mas com IBGE v√°lido
    const { data: licitacao } = await supabase
      .from('licitacoes')
      .select('numero_controle_pncp, codigo_ibge, municipio_nome')
      .is('latitude', null)
      .not('codigo_ibge', 'is', null)
      .limit(1)
      .single();

    if (!licitacao) {
      console.log('‚úÖ Nenhuma licita√ß√£o encontrada para teste!');
      return;
    }

    console.log(`üéØ Testando com: ${licitacao.numero_controle_pncp}`);
    console.log(`   IBGE: ${licitacao.codigo_ibge}`);
    console.log(`   Munic√≠pio: ${licitacao.municipio_nome}`);

    // Buscar coordenadas na tabela munic√≠pios
    const { data: municipio } = await supabase
      .from('municipios')
      .select('latitude, longitude, nome')
      .eq('codigo_ibge', licitacao.codigo_ibge)
      .single();

    if (!municipio) {
      console.log('‚ùå Munic√≠pio n√£o encontrado na tabela');
      return;
    }

    console.log(`üìç Coordenadas encontradas: ${municipio.latitude}, ${municipio.longitude}`);

    // Tentar atualizar
    const { error: updateError } = await supabase
      .from('licitacoes')
      .update({
        latitude: municipio.latitude,
        longitude: municipio.longitude
      })
      .eq('numero_controle_pncp', licitacao.numero_controle_pncp);

    if (updateError) {
      console.log('‚ùå Erro ao atualizar:', updateError.message);
    } else {
      console.log('‚úÖ Licita√ß√£o atualizada com sucesso!');
      
      // Verificar se foi salva
      const { data: verificacao } = await supabase
        .from('licitacoes')
        .select('latitude, longitude')
        .eq('numero_controle_pncp', licitacao.numero_controle_pncp)
        .single();

      console.log(`üîç Verifica√ß√£o: lat=${verificacao?.latitude}, lng=${verificacao?.longitude}`);
    }

  } catch (error) {
    console.error('‚ùå Erro no teste manual:', error);
  }

  console.log('');
}

// Executar se chamado diretamente
if (require.main === module) {
  investigateLicitacoesNullas()
    .then(() => {
      console.log('üéØ Investiga√ß√£o conclu√≠da!');
      process.exit(0);
    })
    .catch(() => process.exit(1));
}

export default investigateLicitacoesNullas;