import 'dotenv/config';
import { PineconeRepository } from '../repositories/pineconeRepository';

/**
 * Script para limpar TODOS os dados do Pinecone
 * ‚ö†Ô∏è CUIDADO: Este script apaga TODOS os vetores do √≠ndice!
 */
class PineconeCleaner {
  private pineconeRepo = new PineconeRepository();

  async clearAllData() {
    console.log('üö® INICIANDO LIMPEZA COMPLETA DO PINECONE');
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Todos os vetores ser√£o APAGADOS!');
    
    try {
      // Inicializar conex√£o
      console.log('üîÑ Conectando ao Pinecone...');
      await this.pineconeRepo.initialize();
      console.log('‚úÖ Conex√£o estabelecida');

      // Obter estat√≠sticas antes da limpeza
      console.log('\nüìä ESTAT√çSTICAS ANTES DA LIMPEZA:');
      const statsBefore = await this.pineconeRepo.getIndexStats();
      console.log(`üìà Total de vetores: ${statsBefore.totalVectorCount}`);
      console.log(`üíæ Dimens√µes: ${statsBefore.dimension}`);
      
      if (statsBefore.totalVectorCount === 0) {
        console.log('‚úÖ √çndice j√° est√° vazio!');
        return;
      }

      // Confirmar limpeza
      console.log('\nüî• INICIANDO LIMPEZA...');
      
      // M√©todo 1: Deletar por namespace (se houver)
      console.log('üóëÔ∏è  Tentando deletar por namespace...');
      try {
        await this.pineconeRepo.deleteAll();
        console.log('‚úÖ Deletado via deleteAll()');
      } catch (error) {
        console.log('‚ö†Ô∏è  deleteAll() n√£o funcionou, tentando m√©todo alternativo...');
        
        // M√©todo 2: Deletar todos os IDs conhecidos
        await this.deleteAllByIds();
      }

      // Aguardar propaga√ß√£o
      console.log('‚è≥ Aguardando propaga√ß√£o (10s)...');
      await new Promise(resolve => setTimeout(resolve, 10000));

      // Verificar estat√≠sticas ap√≥s limpeza
      console.log('\nüìä ESTAT√çSTICAS AP√ìS LIMPEZA:');
      const statsAfter = await this.pineconeRepo.getIndexStats();
      console.log(`üìà Total de vetores: ${statsAfter.totalVectorCount}`);
      
      if (statsAfter.totalVectorCount === 0) {
        console.log('üéâ LIMPEZA CONCLU√çDA COM SUCESSO!');
        console.log('‚úÖ Todos os vetores foram removidos');
      } else {
        console.log(`‚ö†Ô∏è  Ainda restam ${statsAfter.totalVectorCount} vetores`);
        console.log('üí° Pode ser necess√°rio aguardar mais tempo para propaga√ß√£o');
      }

    } catch (error) {
      console.error('‚ùå ERRO durante a limpeza:', error);
      throw error;
    }
  }

  private async deleteAllByIds() {
    console.log('üîç Buscando todos os IDs para deletar...');
    
    try {
      // Buscar uma amostra grande para pegar IDs
      const sampleResults = await this.pineconeRepo.query({
        vector: new Array(1536).fill(0), // Vector dummy
        topK: 10000, // M√°ximo permitido
        includeMetadata: false,
        includeValues: false
      });

      if (sampleResults.matches && sampleResults.matches.length > 0) {
        const ids = sampleResults.matches.map((match: any) => match.id);
        console.log(`üéØ Encontrados ${ids.length} IDs para deletar`);
        
        // Deletar em batches
        const BATCH_SIZE = 1000;
        for (let i = 0; i < ids.length; i += BATCH_SIZE) {
          const batch = ids.slice(i, i + BATCH_SIZE);
          console.log(`üóëÔ∏è  Deletando batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(ids.length/BATCH_SIZE)} (${batch.length} IDs)`);
          
          await this.pineconeRepo.deleteByIds(batch);
          
          // Pausa entre batches
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log('‚úÖ Todos os IDs conhecidos foram deletados');
      } else {
        console.log('‚ÑπÔ∏è  Nenhum ID encontrado via query');
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao deletar por IDs:', error);
      throw error;
    }
  }
}

// Script execut√°vel
async function runPineconeClear() {
  const cleaner = new PineconeCleaner();
  
  console.log('üö® SCRIPT DE LIMPEZA DO PINECONE');
  console.log('‚ö†Ô∏è  Este script ir√° APAGAR TODOS os dados do Pinecone!');
  console.log('üìã Certifique-se de que √© isso que voc√™ deseja fazer.\n');
  
  try {
    await cleaner.clearAllData();
    console.log('\nüéâ SCRIPT CONCLU√çDO COM SUCESSO!');
  } catch (error) {
    console.error('\n‚ùå SCRIPT FALHOU:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runPineconeClear();
}

export { PineconeCleaner, runPineconeClear };
