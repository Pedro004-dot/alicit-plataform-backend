import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

/**
 * SCRIPT DE DEBUG PARA LICITA√á√ïES SEM COORDENADAS
 * Analisa por que algumas licita√ß√µes n√£o foram enriquecidas
 */
async function debugLicitacoesSemCoordenadas() {
  console.log('üîç ANALISANDO LICITA√á√ïES SEM COORDENADAS\n');

  try {
    // 1. Buscar licita√ß√µes sem coordenadas
    const { data: licitacoesSemCoords, error } = await supabase
      .from('licitacoes')
      .select('numero_controle_pncp, codigo_ibge, municipio_nome, uf_nome')
      .is('latitude', null)
      .limit(20); // Analisar apenas uma amostra

    if (error) {
      throw error;
    }

    if (!licitacoesSemCoords || licitacoesSemCoords.length === 0) {
      console.log('‚úÖ Todas as licita√ß√µes j√° possuem coordenadas!');
      return;
    }

    console.log(`üìä Analisando ${licitacoesSemCoords.length} licita√ß√µes sem coordenadas:\n`);

    let semCodigoIbge = 0;
    let codigoIbgeNaoEncontrado = 0;
    let problemasDiversos = 0;

    for (const licitacao of licitacoesSemCoords) {
      console.log(`üîç ${licitacao.numero_controle_pncp}:`);
      console.log(`   Munic√≠pio: ${licitacao.municipio_nome || 'NULO'}`);
      console.log(`   UF: ${licitacao.uf_nome || 'NULO'}`);
      console.log(`   C√≥digo IBGE: ${licitacao.codigo_ibge || 'NULO'}`);

      // Caso 1: N√£o tem c√≥digo IBGE
      if (!licitacao.codigo_ibge) {
        console.log(`   ‚ùå Problema: SEM C√ìDIGO IBGE`);
        semCodigoIbge++;
      } else {
        // Caso 2: C√≥digo IBGE n√£o encontrado na tabela munic√≠pios
        const { data: municipio } = await supabase
          .from('municipios')
          .select('nome, codigo_uf')
          .eq('codigo_ibge', licitacao.codigo_ibge)
          .single();

        if (!municipio) {
          console.log(`   ‚ùå Problema: C√ìDIGO IBGE ${licitacao.codigo_ibge} N√ÉO ENCONTRADO na tabela munic√≠pios`);
          codigoIbgeNaoEncontrado++;
        } else {
          console.log(`   ‚úÖ Munic√≠pio encontrado: ${municipio.nome} (${municipio.codigo_uf})`);
          console.log(`   ‚ùì Problema: OUTRO (verificar l√≥gica do script)`);
          problemasDiversos++;
        }
      }

      console.log(''); // Linha em branco
    }

    console.log('üìà RESUMO DOS PROBLEMAS:');
    console.log(`   üö´ Sem c√≥digo IBGE: ${semCodigoIbge}`);
    console.log(`   üîç C√≥digo IBGE n√£o encontrado: ${codigoIbgeNaoEncontrado}`);
    console.log(`   ‚ùì Outros problemas: ${problemasDiversos}`);

    // 2. Verificar alguns c√≥digos IBGE mais comuns
    await verificarCodigosIbgeComuns();

    // 3. Sugerir solu√ß√µes
    console.log('\nüí° SUGEST√ïES DE SOLU√á√ÉO:');
    
    if (semCodigoIbge > 0) {
      console.log(`   üìç Para ${semCodigoIbge} sem c√≥digo IBGE: Implementar busca por nome da cidade`);
    }
    
    if (codigoIbgeNaoEncontrado > 0) {
      console.log(`   üó∫Ô∏è Para ${codigoIbgeNaoEncontrado} com IBGE inv√°lido: Verificar dados da fonte PNCP`);
    }

  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  }
}

async function verificarCodigosIbgeComuns(): Promise<void> {
  console.log('\nüîç VERIFICANDO C√ìDIGOS IBGE MAIS COMUNS SEM COORDENADAS...');

  try {
    const { data: codigosComuns, error } = await supabase
      .from('licitacoes')
      .select('codigo_ibge, municipio_nome, uf_nome')
      .is('latitude', null)
      .not('codigo_ibge', 'is', null);

    if (error || !codigosComuns) {
      console.log('‚ùå Erro ao buscar c√≥digos IBGE comuns');
      return;
    }

    // Contar frequ√™ncia dos c√≥digos IBGE
    const frequencia = new Map<string, { count: number; municipio: string; uf: string }>();

    for (const item of codigosComuns) {
      const key = item.codigo_ibge;
      if (frequencia.has(key)) {
        frequencia.get(key)!.count++;
      } else {
        frequencia.set(key, {
          count: 1,
          municipio: item.municipio_nome || 'N/A',
          uf: item.uf_nome || 'N/A'
        });
      }
    }

    // Ordenar por frequ√™ncia e mostrar top 10
    const sorted = Array.from(frequencia.entries())
      .sort((a, b) => b[1].count - a[1].count)
      .slice(0, 10);

    console.log('üìä TOP 10 C√ìDIGOS IBGE SEM COORDENADAS:');
    for (const [codigo, info] of sorted) {
      console.log(`   ${codigo}: ${info.count}x - ${info.municipio}/${info.uf}`);
    }

  } catch (error) {
    console.log('‚ùå Erro ao verificar c√≥digos comuns:', error);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  debugLicitacoesSemCoordenadas()
    .then(() => {
      console.log('\nüéØ Debug conclu√≠do!');
      process.exit(0);
    })
    .catch(() => process.exit(1));
}

export default debugLicitacoesSemCoordenadas;